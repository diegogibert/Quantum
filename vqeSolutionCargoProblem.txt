%matplotlib inline
# Importing standard Qiskit libraries and configuring account
from qiskit import QuantumCircuit, execute, Aer, IBMQ
from qiskit.compiler import transpile, assemble
from qiskit.tools.jupyter import *
from qiskit.visualization import *
# Loading your IBM Q account(s)
provider = IBMQ.load_account()

import numpy as np
import math
from qiskit.quantum_info import Pauli
from qiskit.aqua.operators import WeightedPauliOperator
from qiskit.aqua import Operator, run_algorithm
from qiskit.aqua.input import EnergyInput
from collections import OrderedDict
from qiskit import BasicAer 
from qiskit.aqua import QuantumInstance
from qiskit.aqua.algorithms import VQE
from qiskit.aqua.components.optimizers import COBYLA
from qiskit.aqua.components.variational_forms import RY

def get_KnapSack_Hb_qubitops(weight_matrix, c):

    #Generate Hamiltonian B component for the knapsack problem.
    #n = number of containers
    
    #Args:
    #weight_matrix (numpy.ndarray) : weights matrix (vector).
    #c = maximum volume posible.

    #Returns:
    #operator.Operator, float: operator for the Hamiltonian and a constant shift for the obj function.
   
    # n + m + 1 = total of qubits to be used for creating de hamiltonian, and total of gates of the final hamiltonian
   
    # this method works on the first n gates, providing all de different combinations of weigths
   
    pauli_list = []
    n = weight_matrix.shape[0]
    shift = 0
    s = math.log2(c)
    m = math.trunc(s)

    

    for i in range(n + m + 1):                        
                if i < n:  
                    xp = np.zeros(n + m + 1, dtype=np.bool)
                    zp = np.zeros(n + m + 1, dtype=np.bool)
                    zp[i] = True
                    pauli_list.append([0.5 * weight_matrix[i], Pauli(zp, xp)])
                    shift -= 0.5 * weight_matrix[i]
					
    return WeightedPauliOperator(paulis=pauli_list), shift
	
def get_KnapSack_Ha_qubitops(c,n,volum_matrix):
    

    #Generate Hamiltonian A component for the knapsack problem.
    
    #Args:
    #volum_matrix (numpy.ndarray) : volum matrix (vector).
    #c = maximum volume posible.
    #n = number of containers

    #Returns:
    #operator.Operator, float: operator for the Hamiltonian and a constant shift for the obj function.

    #This method works in all of the gates, pleasing the restraints of the problem.

    
    pauli_list2 = []
    shift = 0
    n = 5
    s = math.log2(c)
    m = math.trunc(s)
    
    for i in range(m + 1 + n):                      
        if i >= n:
	    e = 0
            if i < n+m:  
                xp = np.zeros(m + 1 + n, dtype=np.bool)
                zp = np.zeros(m + 1 + n, dtype=np.bool)
                zp[i] = True
                pauli_list2.append([math.pow(2,e), Pauli(zp, xp)])
                shift -= 0.5
                print(Pauli(zp, xp))
                e=e+1
           
            if i == n+m:
                xp = np.zeros(m + 1 + n, dtype=np.bool)
                zp = np.zeros(m + 1 + n, dtype=np.bool)  
                zp[i] = True
                pauli_list2.append([(c-math.pow(2,m)+1),Pauli(zp,xp)])
                print(Pauli(zp, xp))
            
    
    for i in range(m + 1 + n):
        if i<n:
            xp = np.zeros(m + 1 + n, dtype=np.bool)
            zp = np.zeros(m + 1 + n, dtype=np.bool)
            zp[i] = True
            pauli_list2.append([(-0.5)*volum_matrix[n-(i+1)], Pauli(zp, xp)])
            shift -= 0.5
            print(Pauli(zp, xp))
            
    return WeightedPauliOperator(paulis=pauli_list2), shift
	

Weight_matrix = np.array((2134,3455,1866,1699,3500))
volum_matrix = np.array((1,1,1,1,1))
Ha, q1 = get_KnapSack_Ha_qubitops(3, 5, volum_matrix)
Hb, q2 = get_KnapSack_Hb_qubitops(Weight_matrix, 3)

Haf = Ha.multiply(Ha)
haf = 3700*Haf
Ht = haf.add(Hb)

backend = BasicAer.get_backend('statevector_simulator')                                          #
seed = 50       										 #
												 #
cobyla = COBYLA()										 #
cobyla.set_options(maxiter=500)									 #
ry = RY(Ht.num_qubits, depth=3, entanglement='full')						 #
vqe = VQE(Ht, ry, cobyla)									 # running vqe algorithm
vqe.random_seed = seed										 #
												 #
quantum_instance = QuantumInstance(backend=backend, seed_simulator=seed, seed_transpiler=seed)   #
												 #
result = vqe.run(quantum_instance)								 #


def sample_most_likely(state_vector):

    # returns all de different combinations of the x vector(first m+1 coordinates are the maximum capability of the cargo conditioned to the elements to load)
    # (the rest n coordinates indicates which container goes)
    if isinstance(state_vector, (OrderedDict, dict)):
        # get the binary string with the largest count
        binary_string = sorted(state_vector.items(), key=lambda kv: kv[1])[-1][0]
        x = np.asarray([int(y) for y in reversed(list(binary_string))])
        return x
    else:
        n = int(np.log2(state_vector.shape[0]))
        k = np.argmax(np.abs(state_vector))
        x = np.zeros(n)
        for i in range(n):
            x[i] = k % 2
            k >>= 1
        return x
		
		
def index_to_selection(i, num_qubits)
    
    # List all de posible X vector in order from more probabilitiy to less probability
    s = "{0:b}".format(i).rjust(num_qubits)
    x = np.array([1 if s[i]=='1' else 0 for i in reversed(range(num_qubits))])
    return x

def print_result(result):
    
    # Prints the x vectors with its probabilities in decreasing form.
    sml = sample_most_likely(result['eigvecs'][0])
    
    probabilities = np.abs(result['eigvecs'][0])**2
    i_sorted = reversed(np.argsort(probabilities))
    print('\n------------ Full result ----------------')
    print('selection\t\tprobability')
    print('-----------------------------------------')
    for i in i_sorted:
        x = index_to_selection(i, 7) #ese 7 son los num de qbits  
        probability = probabilities[i]
        print('%10s\t\t%.4f' %(x, probability))
		
		
print_result(result)